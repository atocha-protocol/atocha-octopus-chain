// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_atocha
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-02-15, STEPS: `1`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Native), WASM-EXECUTION: Compiled, CHAIN: Some("local"), DB CACHE: 128

// Executed Command:
// ./target/release/atocha-node
// benchmark
// --chain
// local
// --execution=native
// --wasm-execution=compiled
// --pallet
// pallet-atocha
// --extrinsic=*
// --steps
// 1
// --repeat
// 20
// --template=.maintain/frame-weight-template.hbs
// --output=./pallets/atocha/src/weights.rs


#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_atocha.
pub trait WeightInfo {
	fn create_puzzle() -> Weight;
	fn answer_puzzle() -> Weight;
	fn additional_sponsorship() -> Weight;
	fn commit_challenge() -> Weight;
	fn challenge_pull_out() -> Weight;
	fn challenge_crowdloan() -> Weight;
	fn take_answer_reward() -> Weight;
}

/// Weights for pallet_atocha using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn create_puzzle() -> Weight {
		Weight::from_ref_time(80_123_000)
			.saturating_add(T::DbWeight::get().reads(4u64))
			.saturating_add(T::DbWeight::get().writes(3u64))
	}
	fn answer_puzzle() -> Weight {
		Weight::from_ref_time(60_037_000)
			.saturating_add(T::DbWeight::get().reads(3u64))
			.saturating_add(T::DbWeight::get().writes(1u64))
	}
	fn additional_sponsorship() -> Weight {
		Weight::from_ref_time(88_850_000)
			.saturating_add(T::DbWeight::get().reads(4u64))
			.saturating_add(T::DbWeight::get().writes(2u64))
	}
	fn commit_challenge() -> Weight {
		Weight::from_ref_time(133_628_000)
			.saturating_add(T::DbWeight::get().reads(9u64))
			.saturating_add(T::DbWeight::get().writes(6u64))
	}
	fn challenge_pull_out() -> Weight {
		Weight::from_ref_time(114_705_000)
			.saturating_add(T::DbWeight::get().reads(4u64))
			.saturating_add(T::DbWeight::get().writes(2u64))
	}
	fn challenge_crowdloan() -> Weight {
		Weight::from_ref_time(107_566_000)
			.saturating_add(T::DbWeight::get().reads(5u64))
			.saturating_add(T::DbWeight::get().writes(2u64))
	}
	fn take_answer_reward() -> Weight {
		Weight::from_ref_time(156_600_000)
			.saturating_add(T::DbWeight::get().reads(10u64))
			.saturating_add(T::DbWeight::get().writes(6u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn create_puzzle() -> Weight {
		Weight::from_ref_time(80_123_000)
			.saturating_add(RocksDbWeight::get().reads(4u64))
			.saturating_add(RocksDbWeight::get().writes(3u64))
	}
	fn answer_puzzle() -> Weight {
		Weight::from_ref_time(60_037_000)
			.saturating_add(RocksDbWeight::get().reads(3u64))
			.saturating_add(RocksDbWeight::get().writes(1u64))
	}
	fn additional_sponsorship() -> Weight {
		Weight::from_ref_time(88_850_000)
			.saturating_add(RocksDbWeight::get().reads(4u64))
			.saturating_add(RocksDbWeight::get().writes(2u64))
	}
	fn commit_challenge() -> Weight {
		Weight::from_ref_time(133_628_000)
			.saturating_add(RocksDbWeight::get().reads(9u64))
			.saturating_add(RocksDbWeight::get().writes(6u64))
	}
	fn challenge_pull_out() -> Weight {
		Weight::from_ref_time(114_705_000)
			.saturating_add(RocksDbWeight::get().reads(4u64))
			.saturating_add(RocksDbWeight::get().writes(2u64))
	}
	fn challenge_crowdloan() -> Weight {
		Weight::from_ref_time(107_566_000)
			.saturating_add(RocksDbWeight::get().reads(5u64))
			.saturating_add(RocksDbWeight::get().writes(2u64))
	}
	fn take_answer_reward() -> Weight {
		Weight::from_ref_time(156_600_000)
			.saturating_add(RocksDbWeight::get().reads(10u64))
			.saturating_add(RocksDbWeight::get().writes(6u64))
	}

}